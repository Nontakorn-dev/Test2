#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <AsyncTCP.h>
#include <ArduinoJson.h>
#include <SPIFFS.h>

// ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡πÑ‡∏ó‡∏õ‡πå‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
void sendBufferData();
void handleWebSocketMessage(void *arg, uint8_t *data, size_t len);
void onWebSocketEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len);

// WiFi Credentials
const char* ssid = "iPhone"; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô SSID ‡∏Ç‡∏≠‡∏á WiFi ‡∏Ñ‡∏∏‡∏ì
const char* password = "nontakorn"; // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô WiFi ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

// WebServer ‡πÅ‡∏•‡∏∞ WebSocket
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
bool deviceConnected = false;
bool oldDeviceConnected = false;
String receivedCommand = "";

// AD8232 Pins
const int LO_POSITIVE = 13;
const int LO_NEGATIVE = 12;
const int OUTPUT_PIN = 34;

const int SAMPLING_RATE = 360;
const unsigned long SAMPLE_INTERVAL = 1000000 / SAMPLING_RATE;
unsigned long lastSampleTime = 0;

int currentLead = 1;
const int BUFFER_SIZE = 1800;
int ecgBuffer[BUFFER_SIZE];
int bufferIndex = 0;
bool bufferFull = false;

String status = "READY";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå WebSocket
void onWebSocketEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type, void *arg, uint8_t *data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("üì∂ WebSocket Client #%u Connected from %s\n", client->id(), client->remoteIP().toString().c_str());
      deviceConnected = true;
      client->text("STATUS:READY");
      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("üîå WebSocket Client #%u Disconnected\n", client->id());
      deviceConnected = false;
      break;
    case WS_EVT_DATA:
      handleWebSocketMessage(arg, data, len);
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

void handleWebSocketMessage(void *arg, uint8_t *data, size_t len) {
  AwsFrameInfo *info = (AwsFrameInfo*)arg;
  if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
    data[len] = 0;
    receivedCommand = (char*)data;
    receivedCommand.trim();
    Serial.println("üì© Received: " + receivedCommand);

    if (receivedCommand == "START") {
      bufferIndex = 0;
      bufferFull = false;
      status = "MEASURING";
      ws.textAll("STATUS:MEASURING");
      Serial.println("‚ñ∂Ô∏è Started measuring");
    } else if (receivedCommand == "STOP") {
      status = "READY";
      ws.textAll("STATUS:READY");
      Serial.println("‚èπÔ∏è Stopped measuring");
    } else if (receivedCommand.startsWith("LEAD:")) {
      currentLead = receivedCommand.substring(5).toInt();
      String leadMsg = "LEAD:" + String(currentLead);
      ws.textAll(leadMsg.c_str());
      Serial.println("üîÑ Changed lead to: " + String(currentLead));
    } else if (receivedCommand == "SEND") {
      Serial.println("üì§ Sending buffer data");
      sendBufferData();
    }
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("\n=== WatJai ECG WiFi ===");

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AD8232
  pinMode(LO_POSITIVE, INPUT);
  pinMode(LO_NEGATIVE, INPUT);
  pinMode(OUTPUT_PIN, INPUT);
  analogReadResolution(12);
  Serial.println("‚úì AD8232 pins configured");

  // Initialize SPIFFS (‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå)
  if(!SPIFFS.begin(true)){
    Serial.println("‚ùå An Error has occurred while mounting SPIFFS");
    return;
  }
  Serial.println("‚úì SPIFFS initialized");

  // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WiFi
  WiFi.begin(ssid, password);
  Serial.print("üîÑ Connecting to WiFi...");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("‚úì WiFi connected");
  Serial.println("‚úì IP address: " + WiFi.localIP().toString());

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebSocket
  ws.onEvent(onWebSocketEvent);
  server.addHandler(&ws);
  Serial.println("‚úì WebSocket server started");

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å SPIFFS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏ã (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  server.serveStatic("/", SPIFFS, "/").setDefaultFile("index.html");

  // ‡πÄ‡∏£‡∏¥‡πà‡∏° HTTP server
  server.begin();
  Serial.println("‚úì HTTP server started");
  Serial.println("‚úì Ready for connections");
  Serial.println("Device name: WatJai_ECG");
  Serial.println("Connect to: http://" + WiFi.localIP().toString());
}

void loop() {
  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î WebSocket clients
  ws.cleanupClients();
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
  if (deviceConnected && status == "MEASURING") {
    unsigned long currentTime = micros();
    if (currentTime - lastSampleTime >= SAMPLE_INTERVAL) {
      lastSampleTime = currentTime;

      if ((digitalRead(LO_POSITIVE) == 1) || (digitalRead(LO_NEGATIVE) == 1)) {
        ws.textAll("LEADS:OFF");
        Serial.println("‚ö†Ô∏è Leads are not connected");
      } else {
        int ecgValue = analogRead(OUTPUT_PIN);
        ecgBuffer[bufferIndex] = ecgValue;
        bufferIndex++;

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡∏ó‡∏∏‡∏Å 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        if (bufferIndex % 10 == 0) {
          ws.textAll(String(ecgValue));
        }

        if (bufferIndex >= BUFFER_SIZE) {
          bufferFull = true;
          status = "READY";
          ws.textAll("BUFFER:FULL");
          Serial.println("üì¶ Buffer is full");
        }
      }
    }
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠/‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
  if (!deviceConnected && oldDeviceConnected) {
    delay(500);
    oldDeviceConnected = deviceConnected;
    Serial.println("üîå Client Disconnected");
  }
  
  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
    Serial.println("‚úÖ Connection state updated");
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏õ
void sendBufferData() {
  if (bufferFull || bufferIndex > 0) {
    ws.textAll("DATA:START");
    delay(5);

    String leadInfo = "LEAD:" + String(currentLead);
    ws.textAll(leadInfo.c_str());
    delay(5);

    String sampleCount = "SAMPLES:" + String(bufferIndex);
    ws.textAll(sampleCount.c_str());
    delay(5);

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î (20 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    const int CHUNK_SIZE = 20;
    for (int i = 0; i < bufferIndex; i += CHUNK_SIZE) {
      String dataChunk = "";
      int end = min(i + CHUNK_SIZE, bufferIndex);
      
      for (int j = i; j < end; j++) {
        dataChunk += String(ecgBuffer[j]);
        if (j < end - 1) {
          dataChunk += ",";
        }
      }
      
      ws.textAll(dataChunk.c_str());
      delay(5);
    }

    ws.textAll("DATA:END");

    Serial.println("üì§ ECG data sent: " + String(bufferIndex) + " samples");

    bufferIndex = 0;
    bufferFull = false;
  } else {
    ws.textAll("BUFFER:EMPTY");
    Serial.println("‚ö†Ô∏è Buffer is empty, no data to send");
  }
}